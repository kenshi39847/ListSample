package chap05;

public class Chap05Study {

}

/*
「MVCモデル」とは、プログラムの処理を役割ごとに分けてプログラムを作成する考え方で、WEBシステムの開発に用いられる。
役割はModel（モデル：M）、View（ビュー：V）、Controller（コントローラ：C）の3種類に分類される。
○Model（モデル：M）
システムの中のビジネスロジックに該当する。業務処理と言い換えられる事が多く、システムの中で提供するサービス処理になる。
○View（ビュー：V）
見た目のことで、ユーザからの入力、ユーザへの結果出力などシステムの中で表示部分に該当する。
WEBアプリケーションでは主に画面に該当する。
○Controller（コントローラ：C）
サービス処理を行うModelと画面表示を行うViewをコントロール（制御）する役割を持つ。
ユーザからの入力をViewから受け取り、受け取ったデータを元にModelに指示を与える。
また、Modelから受け取った値をViewに伝えて画面に反映させる。


MVCモデルを使用することで、プログラムの独立性が高くなり以下のメリットが生まれる。
1.役割分担することで効率的に開発が行える
2.開発を行うエンジニアの分業が容易になる
3.仕様変更に柔軟に対応できる


「Spring MVC」とは、WEBアプリケーションを簡単に作るための機能を提供してくれるフレームワークのことである。
また、「フロントコントローラ・パターン」とは、デザインパターンというこういう風に作成したら良いという
先人たちの知恵が詰まった設計パターンの1つで、Spring MVCではこのフロントコントローラ・パターンで実装されている。
すべてのリクエストはフロントコントローラが受け取り、その後適切な処理をするコントローラに割り振ろうという設計になる。
○Spring MVCの構成要素
|オブジェクト     |機能概要                                                                    |
|DispatcherServlet|すべてのリクエストを受信するフロントコントローラ                            |
|Model            |コントローラからビューに渡す表示データなどを格納するオブジェクト            |
|コントローラ     |リクエストに応じた処理を行う                                                |
|サービス処理     |データベースへアクセスしてデータを取得、加工など行い、開発者が設計し実装する|
|ビュー           |画面表示処理を行う                                                          |


○リクエスト受信からレスポンス送信までの流れ
1.すべてのリクエストを受信するフロントコントローラであるDispatcherServletがクライアントからのリクエストを受け取る。
2.DispatcherServletがコントローラのリクエストハンドラメソッドを呼び出す。
3.コントローラはサービス処理を実行し、処理結果を取得する。
4.処理結果をModelに設定し、ビュー名を返却する。
5.それを受け、DispatcherServletがビュー名に対応するビューに対して画面表示処理を依頼する。
6.クライアントがレスポンスを受け取り、ブラウザに画面が表示される。


○@RequestMappingの属性
|属性  |機能概要                                                |
|value |・マッピングするにはURLを指定する                       |
       |・最初の「/」は省略可能                                 |
       |・URLパスのみを指定する場合は属性名「value」を省略可能  |
       |・複数のURLパスを指定することもできる                   |
|method|・「GET」や「POST」等のHTTPメソッドを指定する           |
       |・「GET」を指定するには「RequestMethod.GET」を使用する  |
       |・「POST」を指定するには「RequestMethod.POST」を使用する|
       |・複数のHTTPメソッドを指定することもできる              |
       |・クラスに@RequestMappingを付与する場合は指定しない     |


Spring Bootのプロジェクトではテンプレートエンジンを使用する場合、ビューの配置場所が指定されており、以下のルールがある。
・「resources/templates」フォルダにビューを配置する
・ビューが多数必要な場合は機能別にフォルダ分けして配置する
・フォルダ分けした場合は「templates」フォルダ以降のフォルダ名をリクエストハンドラメソッドの戻り値で指定する
・CSSやJavaScriptなどは「resources/static」フォルダに配置することで利用できる


○Spring MVCのプログラム作成
1.プロジェクトの作成
「ファイル」→「新規」→「Springスターター・プロジェクト」を選択し、「新規Springスターター・プロジェクト」画面で作成する。
「依存関係」画面では「Spring Boot DevTools(開発ツール)」、「Thymeleaf(テンプレートエンジン)」、「Spring Web(Web)」を選択する。
2.コントローラの作成
「src/main/java」→「com.example.demo」フォルダを右クリックし「新規」→「クラス」を選択する。
3.ビューの作成
「src/main/resouces」→「templates」フォルダを右クリックし「新規」→「その他」を選択する。
「HTMLファイル」を選択し、ファイル名を入力する。
4.実行と確認
「ウインドウ」→「ビューの表示」→「その他」を選択し「ビューの表示」画面で「Bootダッシュボード」を選択し、開く。
「Bootダッシュボード」上で自身で作製したプロジェクトを選択し「起動」ボタンを押す。
5.ブラウザを立ち上げ、アドレスを入力する
*/