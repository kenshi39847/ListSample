package chap03;

public class Chap03Study {

}

/*
「Spring Framework」はJava開発におけるフレームワークである。単に「Spring」とも呼ばれる。
以下の3つはSpringが提供する機能の一部である。
○Spring Boot
Springアプリケーションを煩雑な設定をせずに迅速に作成する機能
○Spring プロジェクト
・Spring MVC
Webアプリケーションを簡単に作成する機能
・Spring Date
データアクセスに対する機能
・Spring Batch
バッチ処理機能
・Spring Security
認証/認可の機能
○Spring コア
・Spring DI
依存性注入の機能
・Spring AOP
アスペクト指向プログラミングの機能


Spring Frameworkのコアとなる1つ目の機能として「Dependency Injection(DI)：依存性の注入」がある。
プログラムには[使う側]と[使われる側]という関係があり、使いたい機能を呼び出すには[使う側]クラスで[使われる]クラスに対し、
「new」キーワードを使用してインスタンスを生成し参照を取得後、目的の機能を利用する。
もし、[使われる側]クラスが不要になり、別の[使われる側]クラスを利用する場合、[使う側]クラスで
[新たに使われる側]のクラス名およびメソッド名に書き換える必要がある。この書き換える箇所を「依存性がある」という。
依存には以下の2種類がある。
○クラス依存（実装依存）
○インタフェース依存


クラスA[使う側]でnewキーワードを使用しクラスB[使われる側]インスタンスを生成し、インスタンスからメソッド(methodX)を呼び出すコードがある。
（クラスA）
xxx() {
  B b = new B();
  b.methodX();
}
（クラスB）
methodX() {
  ...
}
仕様変更があり、新たに作成されたクラスC[新たに使われる側]のメソッド(methodY)を呼び出すように変更するコードを作る。
（クラスA）
xxx() {
  C c = new C();
  c.methodY();
}
（クラスC）
methodY() {
  ...
}
このように、[使う側]クラスで[使われる側]クラスの型を直接記述してしまうと、
「使われる側」クラスを変更する場合、利用している箇所をすべて修正しなければならない。
この変更箇所が多いことを「高依存」という。

*/
